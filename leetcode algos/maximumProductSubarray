// 152. Maximum Product Subarray
nums = [2,3,-2,4];

var maximumProductSubarray = function(arr) {
  // edge case with 3s
  let edgePlaceholder = null;
  if (arr.length === 3) {
    let max = arr[0];
    for (let i = 0; i < arr.length; i++) {
      max = Math.max(max, arr[i]);
    }
    if (arr[0] <= 0) {
      if (arr[0] === 0) {
        arr.splice(0, 1);
        edgePlaceholder = arr[0];
        edgePlaceholder = edgePlaceholder * arr[1];
        let edgeMax = null;
        for (let i = 0; i < arr.length; i++) {
          edgeMax = Math.max(edgeMax, edgePlaceholder);
        }
        return edgeMax;
      } else if (arr[2] === 0) {
        arr.splice(2, 1);
        edgePlaceholder = arr[0];
        edgePlaceholder - edgePlaceholder * arr[1];
        let edgeMax = null;
        for (let i = 0; i < arr.length; i++) {
          edgeMax = Math.max(edgeMax, edgePlaceholder);
        }
        return edgeMax;
      } else {
        let allNegative = false;
        for (let i = 0; i < arr.length; i++) {
          if (arr[i] > 0) {
            allNegative = false;
            break;
          } else {
            allNegative = true;
          }
        }
        if (allNegative) {
          if (arr[0] > arr[2]) {
            arr.splice(0, 1);
          } else {
            arr.splice(2, 1);
          }
          max = arr[0] * arr[1];
        } else {
          if (arr.includes(0)) {
            let zero = arr.findIndex((zero) => zero === 0);
            arr.splice(zero, 1);
            let withZero = null;
            for (let i = 0; i < arr.length; i++) {
              withZero = Math.max(arr[0], withZero);
            }
            for (let i = 0; i < arr.length; i++) {
              if (arr[0] * arr[1] > withZero) {
                return arr[0] * arr[1];
              } else {
                return withZero;
              }
            }
          }
          if (arr[1] > 0) {
            max = arr[0] * arr[1] * arr[2];
            return max; 
          } else {
            max = arr[0] * arr[1] * arr[2];
            return max; 
          }
        }
      }
    } else {
      max = arr[0] * arr[1] * arr[2];
      let maxProduct = max;
      for (let i = 0; i < arr.length; i++) {
        let current = arr[i];
        if (current > max) {
          max = current;
        }
      }
      if (maxProduct > max) {
        return maxProduct;
      } else {
        return max;
      }
    }
  }

  // ------------------
  let maxProduct = null;
  let multiplier = arr[0];

  for (let i = 1; i < arr.length; i++) {
    const current = arr[i]; 
    if ((multiplier * current) > maxProduct) {
      maxProduct = multiplier * current;
      multiplier = multiplier * current;
    } else if ((multiplier * current) > multiplier) {
      multiplier = multiplier * current;
    } else {
      multiplier = current;
    }
  }

  let secondArr = arr.slice();

  // handle negative numbers / combinations
  let comboMultiplier = secondArr[0];
  for (let i = 1; i < secondArr.length - 1; i++) {
    const current = secondArr[i];
    comboMultiplier = comboMultiplier * current;
  }

  if (comboMultiplier < 0) {
    for (let i = secondArr.length - 1; i >= 0; i--) {
      if (secondArr[i] < 0 && secondArr[i+1] > 0) {
        secondArr.splice(i);
        break;
      }
    }
    // calculate a total based on removing a positive/negative switch
    let newCombo = secondArr[0];
    for (let i = 1; i < secondArr.length; i++) {
      const current = secondArr[i];
      newCombo = newCombo * current;
    }
    comboMultiplier = newCombo;
  }

  if (comboMultiplier > maxProduct) { 
    maxProduct = comboMultiplier;
  }

  if (maxProduct) {
    return maxProduct;
  } else {
    return multiplier;
  }
}

maximumProductSubarray(nums);